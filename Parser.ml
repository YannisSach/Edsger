type token =
  | T_QUES
  | EOL
  | T_EOF
  | T_PLUS
  | T_MINUS
  | T_TIMES
  | T_DIV
  | T_MOD
  | T_ID of (string)
  | T_INT of (int )
  | T_DOUBLE of (float)
  | T_CHAR of (char)
  | T_STRING of (string)
  | T_IF
  | T_BOOLTYPE
  | T_BREAK
  | T_CHARTYPE
  | T_CONTINUE
  | T_DELETE
  | T_DOUBLETYPE
  | T_FALSE
  | T_INTTYPE
  | T_NEW
  | T_NULL
  | T_RETURN
  | T_TRUE
  | T_ELSE
  | T_FOR
  | T_VOID
  | T_BYREF
  | T_SEMIC
  | T_PP
  | T_MM
  | T_AMP
  | T_EX
  | T_AND
  | T_OR
  | T_ASS
  | T_PEQ
  | T_MIEQ
  | T_TEQ
  | T_DEQ
  | T_MEQ
  | T_COMMA
  | T_EQ
  | T_DIF
  | T_BIG
  | T_SMALL
  | T_BEQ
  | T_SEQ
  | T_COLON
  | T_LP
  | T_RP
  | T_RSB
  | T_LSB
  | T_RB
  | T_LB

open Parsing;;
let _ = parse_error;;
# 2 "Parser.mly"
open Ast
open Types
open Str

let rec antistoixise_types_fun t =
    let r  = Str.regexp "\\(char\\|int\\|bool\\|double\\|void\\)\\(\\**\\)" in
    	let tipos = Str.replace_first r "\\1" t 
	and point = Str.replace_first r "\\2" t in
	    check_pointer tipos point;

and check_pointer ty poin = match String.length (poin) with
| 0 -> (check_type ty);
| 1 -> TYPE_pointer (check_type ty)
| _ -> TYPE_pointer (check_pointer ty (String.sub poin 1 ((String.length poin)-1)))

and check_type ty = match ty with
| "void" -> TYPE_proc
| "int" -> TYPE_int
| "double" -> TYPE_double
| "bool" -> TYPE_bool
| "char" -> TYPE_char
| _ -> TYPE_none

# 87 "Parser.ml"
let yytransl_const = [|
  257 (* T_QUES *);
  258 (* EOL *);
  259 (* T_EOF *);
  260 (* T_PLUS *);
  261 (* T_MINUS *);
  262 (* T_TIMES *);
  263 (* T_DIV *);
  264 (* T_MOD *);
  270 (* T_IF *);
  271 (* T_BOOLTYPE *);
  272 (* T_BREAK *);
  273 (* T_CHARTYPE *);
  274 (* T_CONTINUE *);
  275 (* T_DELETE *);
  276 (* T_DOUBLETYPE *);
  277 (* T_FALSE *);
  278 (* T_INTTYPE *);
  279 (* T_NEW *);
  280 (* T_NULL *);
  281 (* T_RETURN *);
  282 (* T_TRUE *);
  283 (* T_ELSE *);
  284 (* T_FOR *);
  285 (* T_VOID *);
  286 (* T_BYREF *);
  287 (* T_SEMIC *);
  288 (* T_PP *);
  289 (* T_MM *);
  290 (* T_AMP *);
  291 (* T_EX *);
  292 (* T_AND *);
  293 (* T_OR *);
  294 (* T_ASS *);
  295 (* T_PEQ *);
  296 (* T_MIEQ *);
  297 (* T_TEQ *);
  298 (* T_DEQ *);
  299 (* T_MEQ *);
  300 (* T_COMMA *);
  301 (* T_EQ *);
  302 (* T_DIF *);
  303 (* T_BIG *);
  304 (* T_SMALL *);
  305 (* T_BEQ *);
  306 (* T_SEQ *);
  307 (* T_COLON *);
  308 (* T_LP *);
  309 (* T_RP *);
  310 (* T_RSB *);
  311 (* T_LSB *);
  312 (* T_RB *);
  313 (* T_LB *);
    0|]

let yytransl_block = [|
  265 (* T_ID *);
  266 (* T_INT *);
  267 (* T_DOUBLE *);
  268 (* T_CHAR *);
  269 (* T_STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\004\000\007\000\
\010\000\010\000\009\000\009\000\009\000\009\000\011\000\011\000\
\008\000\008\000\005\000\005\000\005\000\005\000\013\000\015\000\
\015\000\014\000\014\000\006\000\006\000\006\000\006\000\016\000\
\016\000\017\000\017\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\020\000\
\020\000\021\000\021\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\022\000\022\000\012\000\023\000\023\000\
\023\000\023\000\023\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\025\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\001\000\001\000\001\000\003\000\002\000\
\000\000\002\000\001\000\001\000\001\000\001\000\001\000\004\000\
\003\000\001\000\005\000\006\000\005\000\006\000\002\000\000\000\
\003\000\003\000\002\000\008\000\009\000\008\000\009\000\000\000\
\002\000\000\000\002\000\001\000\002\000\003\000\005\000\007\000\
\010\000\002\000\003\000\002\000\003\000\002\000\003\000\000\000\
\002\000\000\000\001\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\004\000\004\000\002\000\
\003\000\003\000\002\000\002\000\003\000\004\000\005\000\002\000\
\005\000\005\000\002\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\013\000\012\000\014\000\011\000\000\000\105\000\
\000\000\003\000\004\000\005\000\006\000\000\000\009\000\000\000\
\001\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\082\000\080\000\000\000\057\000\
\059\000\058\000\060\000\000\000\055\000\000\000\056\000\054\000\
\097\000\098\000\079\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\021\000\000\000\027\000\000\000\
\000\000\023\000\019\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\016\000\000\000\087\000\088\000\084\000\
\085\000\086\000\095\000\096\000\099\000\103\000\104\000\100\000\
\101\000\102\000\000\000\093\000\094\000\089\000\090\000\091\000\
\092\000\000\000\000\000\068\000\000\000\000\000\067\000\026\000\
\000\000\034\000\022\000\000\000\000\000\034\000\020\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\034\000\025\000\
\000\000\034\000\000\000\062\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\000\000\036\000\030\000\
\034\000\035\000\000\000\000\000\000\000\028\000\000\000\000\000\
\074\000\000\000\000\000\049\000\000\000\000\000\044\000\000\000\
\042\000\046\000\000\000\000\000\037\000\000\000\031\000\029\000\
\000\000\045\000\043\000\047\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\041\000"

let yydgoto = "\002\000\
\008\000\009\000\105\000\011\000\012\000\013\000\014\000\020\000\
\015\000\022\000\021\000\054\000\032\000\033\000\066\000\106\000\
\126\000\146\000\147\000\148\000\177\000\115\000\056\000\099\000\
\057\000\101\000"

let yysindex = "\029\000\
\109\255\000\000\000\000\000\000\000\000\000\000\045\255\000\000\
\022\255\000\000\000\000\000\000\000\000\051\255\000\000\027\255\
\000\000\000\000\053\255\067\255\059\255\091\255\042\255\066\255\
\214\004\000\000\105\255\000\000\124\255\226\254\118\255\087\255\
\099\255\237\254\089\255\000\000\000\000\000\000\093\255\000\000\
\000\000\000\000\000\000\214\004\000\000\124\255\000\000\000\000\
\000\000\000\000\000\000\000\000\150\004\094\255\038\001\214\004\
\214\004\095\255\000\000\138\255\000\000\109\255\000\000\245\254\
\098\255\000\000\000\000\109\255\254\254\105\004\096\255\097\255\
\000\000\100\255\004\000\000\000\214\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\214\004\000\000\000\000\000\000\000\000\000\000\
\000\000\214\004\214\004\000\000\214\004\096\255\000\000\000\000\
\109\255\000\000\000\000\109\255\099\255\000\000\000\000\109\255\
\000\000\038\001\227\254\214\004\149\255\214\004\000\000\057\000\
\001\255\077\000\001\255\001\255\000\000\105\002\000\000\000\000\
\154\002\000\000\214\004\000\000\129\000\241\004\057\255\214\004\
\000\000\218\254\104\255\044\255\054\255\182\004\000\000\000\000\
\000\000\000\000\149\000\131\255\203\002\000\000\252\002\090\001\
\000\000\057\255\058\004\000\000\214\004\126\255\000\000\132\255\
\000\000\000\000\201\000\045\003\000\000\112\255\000\000\000\000\
\221\000\000\000\000\000\000\000\000\000\214\004\182\003\038\001\
\150\255\159\255\214\004\182\003\156\255\000\000\214\004\137\255\
\182\003\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\235\254\000\000\162\255\251\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\141\255\000\000\000\000\000\000\000\000\000\000\129\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\142\255\000\000\
\000\000\235\254\000\000\000\000\000\000\007\002\000\000\000\000\
\000\000\000\000\000\000\007\002\000\000\000\000\110\001\161\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\212\001\000\000\000\000\
\007\002\000\000\000\000\007\002\141\255\000\000\000\000\007\002\
\000\000\144\255\000\000\000\000\184\255\000\000\000\000\000\000\
\209\003\000\000\230\003\007\004\000\000\167\255\000\000\000\000\
\167\255\000\000\000\000\000\000\000\000\205\255\080\003\000\000\
\000\000\018\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\167\255\000\000\167\255\229\254\
\000\000\131\003\112\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\167\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\168\255\167\255\047\255\
\000\000\056\002\168\255\167\255\000\000\000\000\145\255\000\000\
\167\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\083\000\000\000\000\000\000\000\012\000\173\000\
\155\000\130\000\000\000\000\000\178\000\139\000\096\000\191\255\
\233\255\092\255\231\255\000\000\198\255\000\000\000\000\000\000\
\203\255\000\000"

let yytablesize = 1573
let yytable = "\055\000\
\061\000\100\000\110\000\008\000\078\000\079\000\080\000\081\000\
\082\000\015\000\178\000\067\000\156\000\070\000\131\000\182\000\
\077\000\100\000\071\000\107\000\186\000\100\000\015\000\132\000\
\017\000\077\000\062\000\075\000\111\000\001\000\102\000\103\000\
\049\000\050\000\031\000\031\000\003\000\068\000\004\000\125\000\
\060\000\005\000\127\000\006\000\114\000\108\000\130\000\008\000\
\100\000\100\000\007\000\120\000\158\000\016\000\112\000\098\000\
\003\000\072\000\004\000\019\000\100\000\005\000\160\000\006\000\
\074\000\121\000\100\000\100\000\100\000\100\000\100\000\029\000\
\122\000\123\000\159\000\124\000\031\000\051\000\023\000\100\000\
\003\000\100\000\004\000\010\000\161\000\005\000\129\000\006\000\
\049\000\050\000\133\000\018\000\135\000\100\000\030\000\029\000\
\028\000\026\000\100\000\051\000\100\000\100\000\027\000\149\000\
\024\000\152\000\151\000\025\000\154\000\100\000\155\000\098\000\
\003\000\058\000\004\000\100\000\163\000\005\000\034\000\006\000\
\181\000\164\000\100\000\003\000\184\000\004\000\063\000\029\000\
\005\000\052\000\006\000\169\000\052\000\052\000\052\000\052\000\
\052\000\007\000\003\000\064\000\004\000\069\000\065\000\005\000\
\070\000\006\000\104\000\076\000\176\000\025\000\098\000\116\000\
\118\000\176\000\134\000\157\000\170\000\176\000\166\000\052\000\
\052\000\052\000\171\000\174\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\179\000\052\000\052\000\052\000\
\008\000\180\000\183\000\008\000\008\000\185\000\008\000\008\000\
\018\000\024\000\048\000\078\000\076\000\050\000\050\000\059\000\
\073\000\035\000\117\000\109\000\128\000\010\000\000\000\000\000\
\010\000\010\000\010\000\010\000\010\000\000\000\008\000\008\000\
\008\000\000\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\010\000\008\000\008\000\008\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\010\000\010\000\010\000\077\000\000\000\000\000\078\000\
\079\000\080\000\081\000\082\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\000\000\000\000\
\119\000\077\000\098\000\000\000\078\000\079\000\080\000\081\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\000\000\
\049\000\050\000\000\000\000\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\136\000\049\000\050\000\000\000\098\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\000\000\
\000\000\077\000\137\000\098\000\078\000\079\000\080\000\081\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\000\000\
\049\000\050\000\000\000\000\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\165\000\049\000\050\000\153\000\098\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\000\000\
\000\000\077\000\000\000\098\000\078\000\079\000\080\000\081\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\172\000\
\049\000\050\000\000\000\000\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\000\000\049\000\050\000\000\000\098\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\000\000\
\000\000\175\000\052\000\098\000\000\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\
\000\000\078\000\079\000\080\000\081\000\082\000\000\000\000\000\
\052\000\052\000\052\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\049\000\050\000\000\000\
\052\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\000\000\000\000\077\000\000\000\098\000\078\000\079\000\080\000\
\081\000\082\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\000\
\000\000\075\000\075\000\075\000\075\000\075\000\000\000\000\000\
\000\000\049\000\050\000\000\000\000\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\000\000\092\000\093\000\
\094\000\095\000\096\000\097\000\075\000\075\000\075\000\000\000\
\098\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\072\000\075\000\075\000\072\000\072\000\072\000\072\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\072\000\072\000\000\000\000\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\064\000\072\000\072\000\064\000\
\064\000\064\000\064\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\064\000\064\000\000\000\000\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\064\000\064\000\032\000\032\000\032\000\000\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\032\000\000\000\
\032\000\032\000\000\000\032\000\000\000\032\000\032\000\032\000\
\032\000\000\000\032\000\000\000\000\000\032\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\039\000\039\000\039\000\032\000\032\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\
\000\000\039\000\039\000\000\000\039\000\000\000\039\000\039\000\
\039\000\039\000\000\000\039\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\036\000\037\000\038\000\039\000\
\039\000\138\000\040\000\041\000\042\000\043\000\139\000\000\000\
\140\000\000\000\141\000\044\000\000\000\045\000\000\000\046\000\
\047\000\142\000\048\000\000\000\000\000\000\000\000\000\143\000\
\049\000\050\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\036\000\037\000\038\000\
\144\000\145\000\138\000\040\000\041\000\042\000\043\000\139\000\
\000\000\140\000\000\000\141\000\044\000\000\000\045\000\000\000\
\046\000\047\000\142\000\048\000\000\000\000\000\000\000\000\000\
\143\000\049\000\050\000\051\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\036\000\037\000\
\038\000\150\000\145\000\138\000\040\000\041\000\042\000\043\000\
\139\000\000\000\140\000\000\000\141\000\044\000\000\000\045\000\
\000\000\046\000\047\000\142\000\048\000\000\000\000\000\000\000\
\000\000\143\000\049\000\050\000\051\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\036\000\
\037\000\038\000\167\000\145\000\138\000\040\000\041\000\042\000\
\043\000\139\000\000\000\140\000\000\000\141\000\044\000\000\000\
\045\000\000\000\046\000\047\000\142\000\048\000\000\000\000\000\
\000\000\000\000\143\000\049\000\050\000\051\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\036\000\037\000\038\000\168\000\145\000\138\000\040\000\041\000\
\042\000\043\000\139\000\000\000\140\000\000\000\141\000\044\000\
\000\000\045\000\000\000\046\000\047\000\142\000\048\000\000\000\
\000\000\000\000\000\000\143\000\049\000\050\000\051\000\052\000\
\070\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\173\000\145\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\000\000\
\071\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\073\000\070\000\070\000\073\000\073\000\
\073\000\073\000\073\000\000\000\000\000\000\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\000\000\000\000\
\000\000\073\000\071\000\000\000\071\000\071\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\000\000\073\000\
\073\000\036\000\037\000\038\000\000\000\000\000\138\000\040\000\
\041\000\042\000\043\000\139\000\000\000\140\000\000\000\141\000\
\044\000\000\000\045\000\000\000\046\000\047\000\142\000\048\000\
\000\000\066\000\000\000\000\000\143\000\049\000\050\000\051\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\145\000\066\000\
\000\000\000\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\065\000\066\000\066\000\069\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\069\000\069\000\078\000\079\000\080\000\
\081\000\082\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\050\000\000\000\000\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\000\093\000\
\094\000\095\000\096\000\097\000\036\000\037\000\038\000\000\000\
\098\000\039\000\040\000\041\000\042\000\043\000\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\045\000\000\000\046\000\
\047\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\049\000\050\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\037\000\038\000\053\000\113\000\039\000\040\000\
\041\000\042\000\043\000\000\000\003\000\000\000\004\000\000\000\
\044\000\005\000\045\000\006\000\046\000\047\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\036\000\037\000\038\000\000\000\000\000\039\000\040\000\
\041\000\042\000\043\000\000\000\000\000\000\000\000\000\000\000\
\044\000\053\000\045\000\000\000\046\000\047\000\000\000\048\000\
\000\000\000\000\000\000\000\000\162\000\049\000\050\000\051\000\
\052\000\036\000\037\000\038\000\000\000\000\000\039\000\040\000\
\041\000\042\000\043\000\000\000\000\000\000\000\000\000\000\000\
\044\000\053\000\045\000\000\000\046\000\047\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\039\000\040\000\041\000\042\000\043\000\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\045\000\000\000\046\000\
\047\000\053\000\048\000\000\000\000\000\000\000\000\000\000\000\
\049\000\050\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000"

let yycheck = "\025\000\
\031\001\055\000\068\000\009\001\004\001\005\001\006\001\007\001\
\008\001\031\001\175\000\031\001\051\001\052\001\044\001\180\000\
\044\001\071\000\044\000\031\001\185\000\075\000\044\001\053\001\
\003\001\053\001\057\001\053\000\031\001\001\000\056\000\057\000\
\032\001\033\001\023\000\024\000\015\001\057\001\017\001\105\000\
\029\000\020\001\108\000\022\001\070\000\057\001\112\000\053\001\
\102\000\103\000\029\001\077\000\009\001\009\001\057\001\055\001\
\015\001\046\000\017\001\009\001\114\000\020\001\009\001\022\001\
\053\000\091\000\120\000\121\000\122\000\123\000\124\000\030\001\
\098\000\099\000\031\001\101\000\065\000\031\001\052\001\133\000\
\015\001\135\000\017\001\001\000\031\001\020\001\110\000\022\001\
\032\001\033\001\116\000\009\000\118\000\147\000\053\001\030\001\
\006\001\031\001\152\000\053\001\154\000\155\000\044\001\127\000\
\052\001\131\000\130\000\055\001\134\000\163\000\136\000\055\001\
\015\001\009\001\017\001\169\000\142\000\020\001\053\001\022\001\
\179\000\145\000\176\000\015\001\183\000\017\001\009\001\030\001\
\020\001\001\001\022\001\157\000\004\001\005\001\006\001\007\001\
\008\001\029\001\015\001\053\001\017\001\053\001\044\001\020\001\
\052\001\022\001\009\001\054\001\174\000\055\001\055\001\055\001\
\053\001\179\000\006\001\052\001\031\001\183\000\028\001\031\001\
\032\001\033\001\031\001\052\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\031\001\053\001\054\001\055\001\
\001\001\027\001\031\001\004\001\005\001\053\001\007\001\008\001\
\031\001\053\001\028\001\054\001\053\001\053\001\031\001\027\000\
\046\000\024\000\073\000\065\000\109\000\001\001\255\255\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\031\001\053\001\054\001\055\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\053\001\054\001\055\001\001\001\255\255\255\255\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\053\001\001\001\055\001\255\255\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\032\001\033\001\255\255\055\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\001\001\054\001\055\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\031\001\032\001\033\001\054\001\055\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\001\001\255\255\055\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\031\001\
\032\001\033\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\032\001\033\001\255\255\055\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\053\001\001\001\055\001\255\255\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\032\001\033\001\255\255\
\055\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\001\001\255\255\055\001\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\045\001\046\001\
\047\001\048\001\049\001\050\001\031\001\032\001\033\001\255\255\
\055\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\001\001\053\001\054\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\001\001\053\001\054\001\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\053\001\054\001\004\001\005\001\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\255\255\
\018\001\019\001\255\255\021\001\255\255\023\001\024\001\025\001\
\026\001\255\255\028\001\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\004\001\005\001\006\001\056\001\057\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\018\001\019\001\255\255\021\001\255\255\023\001\024\001\
\025\001\026\001\255\255\028\001\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\004\001\005\001\006\001\056\001\
\057\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\255\255\018\001\019\001\255\255\021\001\255\255\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\004\001\005\001\006\001\
\056\001\057\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\018\001\019\001\255\255\021\001\255\255\
\023\001\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\004\001\005\001\
\006\001\056\001\057\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\018\001\019\001\255\255\021\001\
\255\255\023\001\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\004\001\
\005\001\006\001\056\001\057\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\255\255\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\004\001\005\001\006\001\056\001\057\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\255\255\018\001\019\001\
\255\255\021\001\255\255\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\001\001\255\255\255\255\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\255\255\255\255\255\255\056\001\057\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\255\255\
\001\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\001\001\053\001\054\001\004\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\031\001\051\001\255\255\053\001\054\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\053\001\
\054\001\004\001\005\001\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\255\255\018\001\
\019\001\255\255\021\001\255\255\023\001\024\001\025\001\026\001\
\255\255\001\001\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\052\001\255\255\255\255\255\255\255\255\057\001\031\001\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\031\001\053\001\054\001\001\001\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\053\001\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\053\001\054\001\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\033\001\255\255\255\255\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\046\001\
\047\001\048\001\049\001\050\001\004\001\005\001\006\001\255\255\
\055\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\021\001\255\255\023\001\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\004\001\005\001\006\001\052\001\053\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\255\255\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\004\001\005\001\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\019\001\052\001\021\001\255\255\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\004\001\005\001\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\019\001\052\001\021\001\255\255\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\021\001\255\255\023\001\
\024\001\052\001\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001"

let yynames_const = "\
  T_QUES\000\
  EOL\000\
  T_EOF\000\
  T_PLUS\000\
  T_MINUS\000\
  T_TIMES\000\
  T_DIV\000\
  T_MOD\000\
  T_IF\000\
  T_BOOLTYPE\000\
  T_BREAK\000\
  T_CHARTYPE\000\
  T_CONTINUE\000\
  T_DELETE\000\
  T_DOUBLETYPE\000\
  T_FALSE\000\
  T_INTTYPE\000\
  T_NEW\000\
  T_NULL\000\
  T_RETURN\000\
  T_TRUE\000\
  T_ELSE\000\
  T_FOR\000\
  T_VOID\000\
  T_BYREF\000\
  T_SEMIC\000\
  T_PP\000\
  T_MM\000\
  T_AMP\000\
  T_EX\000\
  T_AND\000\
  T_OR\000\
  T_ASS\000\
  T_PEQ\000\
  T_MIEQ\000\
  T_TEQ\000\
  T_DEQ\000\
  T_MEQ\000\
  T_COMMA\000\
  T_EQ\000\
  T_DIF\000\
  T_BIG\000\
  T_SMALL\000\
  T_BEQ\000\
  T_SEQ\000\
  T_COLON\000\
  T_LP\000\
  T_RP\000\
  T_RSB\000\
  T_LSB\000\
  T_RB\000\
  T_LB\000\
  "

let yynames_block = "\
  T_ID\000\
  T_INT\000\
  T_DOUBLE\000\
  T_CHAR\000\
  T_STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'program) in
    Obj.repr(
# 97 "Parser.mly"
                             (program_tree:= Some _1)
# 742 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 100 "Parser.mly"
                                (_1 @ [_2])
# 750 "Parser.ml"
               : 'program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 101 "Parser.mly"
                          ([_1])
# 757 "Parser.ml"
               : 'program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 105 "Parser.mly"
                                (_1)
# 764 "Parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_declaration) in
    Obj.repr(
# 106 "Parser.mly"
                                 (_1)
# 771 "Parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 107 "Parser.mly"
                               (_1)
# 778 "Parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarators) in
    Obj.repr(
# 111 "Parser.mly"
                                     (Variable_dec (_1,_2))
# 786 "Parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'star) in
    Obj.repr(
# 120 "Parser.mly"
                                   ( antistoixise_types_fun ( _1^_2) )
# 794 "Parser.ml"
               : 'type_t))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "Parser.mly"
             ("")
# 800 "Parser.ml"
               : 'star))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'star) in
    Obj.repr(
# 124 "Parser.mly"
                          ((_1^"*"))
# 807 "Parser.ml"
               : 'star))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "Parser.mly"
                               ("int")
# 813 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "Parser.mly"
                                  ("char")
# 819 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "Parser.mly"
                                  ("bool")
# 825 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "Parser.mly"
                                   ("double")
# 831 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "Parser.mly"
               (Simple_declarator _1)
# 838 "Parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constant_expression) in
    Obj.repr(
# 136 "Parser.mly"
                                                 (Complex_declarator (_1,Constant_exp _3))
# 846 "Parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarators) in
    Obj.repr(
# 140 "Parser.mly"
                                         (_1::_3)
# 854 "Parser.ml"
               : 'declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 141 "Parser.mly"
                      ([_1])
# 861 "Parser.ml"
               : 'declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'type_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 145 "Parser.mly"
                                       (Function_dec (_1,_2,[]))
# 869 "Parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'type_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    Obj.repr(
# 146 "Parser.mly"
                                                       (Function_dec(_1,_2,_4))
# 878 "Parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 147 "Parser.mly"
                                        (Function_dec(TYPE_proc,_2,[]))
# 885 "Parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    Obj.repr(
# 148 "Parser.mly"
                                                       (Function_dec(TYPE_proc,_2,_4))
# 893 "Parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parameter) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 159 "Parser.mly"
                                 (_1::_2)
# 901 "Parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "Parser.mly"
             ([])
# 907 "Parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'parameter) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 164 "Parser.mly"
                                           (_2::_3)
# 915 "Parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 168 "Parser.mly"
                                 (By_ref_param (_2,_3))
# 923 "Parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "Parser.mly"
                          (By_val_param (_1,_2))
# 931 "Parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'type_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 173 "Parser.mly"
                                                                                 (Function_def(_1,_2,[],_6,_7))
# 941 "Parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'type_t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 174 "Parser.mly"
                                                                                                   (Function_def(_1,_2,_4,_7,_8))
# 952 "Parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 176 "Parser.mly"
                                                                                  (Function_def(TYPE_proc,_2,[],_6,_7))
# 961 "Parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 177 "Parser.mly"
                                                                                                 (Function_def(TYPE_proc,_2,_4,_7,_8))
# 971 "Parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "Parser.mly"
             ([])
# 977 "Parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declarations) in
    Obj.repr(
# 182 "Parser.mly"
                                    (_1::_2)
# 985 "Parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "Parser.mly"
             ([])
# 991 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 188 "Parser.mly"
                                         (_1@[_2])
# 999 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "Parser.mly"
                 (Simple_expression None)
# 1005 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 192 "Parser.mly"
                               (Simple_expression (Some _1))
# 1012 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 193 "Parser.mly"
                                 (Statements _2)
# 1019 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 194 "Parser.mly"
                                                              (If_stmt(_3,_5))
# 1027 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 195 "Parser.mly"
                                                                 (If_else_stmt(_3,_5,_7))
# 1036 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'optional_t_id_t_colon) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'optional_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'optional_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'optional_expression) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 196 "Parser.mly"
                                                                                                                                        (For_loop(_1,_4,_6,_8,_10))
# 1047 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "Parser.mly"
                                 (Branch ("continue",None))
# 1053 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 198 "Parser.mly"
                                     (Branch ("continue",Some _2))
# 1060 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "Parser.mly"
                              (Branch ("break",None))
# 1066 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 200 "Parser.mly"
                                 (Branch ("break",Some _2))
# 1073 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "Parser.mly"
                              (Return None)
# 1079 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 202 "Parser.mly"
                                        (Return (Some _2))
# 1086 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "Parser.mly"
             (None)
# 1092 "Parser.ml"
               : 'optional_t_id_t_colon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 206 "Parser.mly"
                        (Some _1)
# 1099 "Parser.ml"
               : 'optional_t_id_t_colon))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "Parser.mly"
             (None)
# 1105 "Parser.ml"
               : 'optional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 211 "Parser.mly"
                      (Some _1)
# 1112 "Parser.ml"
               : 'optional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 214 "Parser.mly"
                 (Id _1)
# 1119 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 215 "Parser.mly"
                                  (Paren_expression _2)
# 1126 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "Parser.mly"
                   (Bool true)
# 1132 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "Parser.mly"
                                        (Bool false)
# 1138 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "Parser.mly"
                                                               (String "null")
# 1144 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int ) in
    Obj.repr(
# 217 "Parser.mly"
                   (Int _1)
# 1151 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 217 "Parser.mly"
                                    (Char _1)
# 1158 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 217 "Parser.mly"
                                                          (Double _1)
# 1165 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 217 "Parser.mly"
                                                                                 (String _1)
# 1172 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 218 "Parser.mly"
                            (Function_call (_1, []))
# 1179 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 219 "Parser.mly"
                                           (Function_call (_1,_3))
# 1187 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 220 "Parser.mly"
                                                            (Array (_1,_3))
# 1195 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unary_operator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 221 "Parser.mly"
                                                  (Unary_op (_1,_2))
# 1203 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binary_operator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 222 "Parser.mly"
                                                                 (Binary_op (_1,_2,_3))
# 1212 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 223 "Parser.mly"
                                                         (Binary_op (_1,",",_3))
# 1220 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unary_assignment) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 224 "Parser.mly"
                                                     (Prefix_unary_as (_1,_2))
# 1228 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_assignment) in
    Obj.repr(
# 225 "Parser.mly"
                                                       (Postfix_unary_as(_1,_2))
# 1236 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binary_assignment) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 226 "Parser.mly"
                                                                     (Binary_as (_1,_2,_3))
# 1245 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 227 "Parser.mly"
                                                      (Casting (_2,_4))
# 1253 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 228 "Parser.mly"
                                                                          ( Question (_1,_3,_5))
# 1262 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_t) in
    Obj.repr(
# 229 "Parser.mly"
                          (New_op (_2,None))
# 1269 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'basic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'star) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 230 "Parser.mly"
                                                     (Binary_op (New_op(antistoixise_types_fun (_2^_3),None),"*",_5))
# 1278 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 231 "Parser.mly"
                                                              (New_op (_2,Some _4))
# 1286 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 232 "Parser.mly"
                                (Delete_op _2)
# 1293 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 236 "Parser.mly"
                           ([_1])
# 1300 "Parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 237 "Parser.mly"
                                             (_1 @ [_3])
# 1308 "Parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 242 "Parser.mly"
            (Constant_exp _1)
# 1315 "Parser.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
        ("&")
# 1321 "Parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
                       ("*")
# 1327 "Parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
                                       ("+")
# 1333 "Parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
                                                       ("-")
# 1339 "Parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
                                                                   ("!")
# 1345 "Parser.ml"
               : 'unary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
          ("*")
# 1351 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                        ("/")
# 1357 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                      ("%")
# 1363 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                     ("+")
# 1369 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                     ("-")
# 1375 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                   (">")
# 1381 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                   ("<")
# 1387 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                                 (">=")
# 1393 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                                                ("<=")
# 1399 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                                                              ("==")
# 1405 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                                                                             ("!=")
# 1411 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                                                                                            ("&&")
# 1417 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                                                                                                                                                          ("||")
# 1423 "Parser.ml"
               : 'binary_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "Parser.mly"
       ("++")
# 1429 "Parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "Parser.mly"
                    ("--")
# 1435 "Parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
        ("=")
# 1441 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
                      ("*=")
# 1447 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
                                     ("/=")
# 1453 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
                                                    ("%=")
# 1459 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
                                                                   ("+=")
# 1465 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "Parser.mly"
                                                                                  ("-=")
# 1471 "Parser.ml"
               : 'binary_assignment))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
